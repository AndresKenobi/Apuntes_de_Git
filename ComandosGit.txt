Git: Sistema de control de versiones
controla o administra las distintas versiones (cambios) de un programa.
Podemos coordinar trabajos con otros desarrolladores en un mismo proyecto.
Podemos ver quien y cuando hace cambios.
Podemos revertir los cambios realizados.
Podemos elaborar repositorios locales y remotos(on line).

Conceptos de Git:
1. Ofrece el rastreo de la historia de tu codigo
2. Toma "snapshots" de tus archivos
3. Tu decides cuando hacer snapshots cuando haces un "commit"
4. Tu puedes visitar cualquier snapshot en cuando quieras
5. tu puedes crear etapas antes de (commiting) cometerlas/realizarlas/prepararlas

Etapas de trabajo
Working directory (carpetas locales)---> git add ---> Staging area (area de etapas/estados)
Staging area (area de etapas)---> git commit ---> Repository

Comandos Basicos (ejecutar en el Git Bash o consola de Git)

*Para iniciar el repositorio...
*Ubicarse en la carpeta donde estan los archivos/click derecho/Git Bash Here

git init: iniciar un nuevo proyecto en Git - para crear un repositorio
git add <file>: anexar archivos al Staging area (uno por uno)
(Se debe anexar la extension de los archivos)
git add .: anexa todos los archivos que esten en la carpeta (working directory)
git status: Saber en que estado estan mis archivos o en que etapa
git commit -m: Crear los snapshots de los archivos antes de pasar al repositorio
(la foto de tu version del codigo en ese instante)(el comentario va entre comillas)

**Quien eres tu?** Para primera vez en Git, configurar correo y usuario:
git config --global user.name "Your Name"
git config --global user.email "Youremail@example.com"

git remote add origin <https://ejemplo.com>: Una vez creado nuestro nuevo repositorio
	en GitHub, anexamos la direccion de la pagina para crear nuestro repositorio remoto.

git push -u origin <nombre rama>: Una vez creado el repositorio, debemos llenarlo con los 
	archivos segun la version del proyecto que estemos trabajando.

**nota: Si es primera vez en ese repositorio te da a pedir autenticacion de GitHub
	Usuario y contraseña.
	
	**Quien eres tu?** Para primera vez en Git, configurar correo y usuario:
	git config --global user.name "Your Name"
	git config --global user.email "Youremail@example.com"

*Desde GitHub..

Una vez creado nuestro repositorio creamos nuestro archivo README.md
Le damos la descripcion de nuestro proyecto

git remote -v: nos muestra el link del repositorio remoto actual
git remote add (origin) esta variable se puede cambiar p.ej origin2
		git remote add origin2 <https://ejemplo.com>
git remote set-url origin <https://ejemplo.com>
	cambiamos el remoto actual o la direccion 

git push: es para subirlo a un repositorio remoto
git pull: Te trae los cambios que han hecho los otros desarrolladores
(Los que tengan acceso)
git clone: Hace una copia de los archivos desde el servidor hacia tu computador
git log: Permite ver todos los commits que hemos creado ("los hash")
(Los hash diferencian cada commit/snapshots)

git diff <nombrearchivo.extension>: nos muestra un resumen corto de los cambios
realizados en el archivo.
	- resta: lo que he quitado de ese archivo
	+ suma: lo que he agregado
**nota: si deseo agregar estos nuevos cambios debo hacer de nuevo...
	git add <file>
	git commit -m

Si deseo revertir los cambios en un archivo...

git checkout -- <nombrearchivo.extension>: para revertir los cambios en los archivos
(esto es una vez hecho el commit y haber hecho un cambio en el editor de codigo/local)

Solo funciona una vez....

Para revertir cambios de un archivo mas de una vez...

git reset HEAD <nombrearchivo.extensionarchivo> porque hay que traerlo de nuevo al staging area
	vuelves a ejecutar:
	git checkout -- <nombrearchivo.extension>:

Como deshacer un commit?...

1. listamos los commits con git log ---> git log --oneline
2. copiamos el No/codigo del commit a eliminar
3. git reset codigo commit
4. verificamos en git log o git log -- oneline
5. git diff para ver la diferencia o los ultimos cambios
	(para volver a normalizar o deshacer cambios)
6. git status para ver el archivo de modificaciones 
7. git checkout -- <archivo.+ext>

Si quiero deshacer todo, cambios en archivos + commit...
	git reset --hard codigo commit

Si quiero regresar un commit, y dejar los cambios en stagging area
	git reset --soft codigo commit (Opcion recomendada)

Deshacer cambios con revert (opcion mas recomendada/-destructiva)...

1. git log --oneline | cat (muestra los commits en pantalla)
2. git diff (codigo ultimo commit) (codigo penultimo commit) ---> diferencia entre commits
   o ultimos cambios.

3. Punteros: 
	git log -oneline --decorate (señala el ultimo commit y la rama)
	git diff HEAD~1 se traduce como: cambios 1 commit antes...
	git diff HEAD~2 se traduce como: cambios 2 commit antes...
	git diff HEAD~1 HEAD: cambios del ultimo commit con su anterior.

4. git revert HEAD (vuelve a colocar los cambios - y quita los cambios +)
	HEAD porque es el puntero o el ultimo commit

	Nota: cada vez que se ejecuta un revert crea un objeto commit-revert por lo que
	no nos interesa crearlos

5. git revert --no-commit HEAD pero para finalizar .....
	git revert --continue

	git reset es seguro eliminando commits / o cambios de forma local o con repositorios 
	propios, pero NO es muy seguro con repositorios compartidos. Se recomienda usar revert

.gitignore

**Ignorar otros archivos/carpetas que estan en misma ubicacion del proyecto
Es cuando queremos ignorar otros archivos o carpetas que no queremos ver o tener en cuenta

Desde el editor: creamos un archivo con el nombre .gitignore
		En ese archivo ponemos los nombres de los archivos que queremos
		que Git NO tenga en cuenta para crear nuestro repositorio

Desde el comand prompt: 
	Create the text file gitignore.txt.
	Open it in a text editor and add your rules, then save and close.
	Hold SHIFT, right click the folder you're in, then select Open command window here.
	Then rename the file in the command line with:
		ren gitignore.txt .gitignore. (desde el command prompt)

If you want to remove the file from the Git repository and the filesystem, use:

	git rm file1.txt
	git commit -m "remove file1.txt"

Desde el mismo Git Bash:
	git touch .gitignore
**nota: Una vez haber nombrado en este archivo los nombres de los archivos
	y su extension, y/o los nombres de las carpetas que no queremos ver
	debemos anexar este archivo y crear su respectivo commit/snapshot...
	git add .gitignore
	git commit -m "message" .gitignore
	
	Open Notepad (Otra forma)
	Add the contents of your gitignore file.
	Click "Save as" and select "all files".
	Save as .gitignore

git branch (ramas): lista las particiones o versiones alternativas de todo el proyecto segun tengamos
git branch <nombre>: creamos una nueva version del proyecto, debemos si o si estar en un remote
	
	Para moverme dentro de esta nueva version:
		git checkout <nombre>
	Para cambiar el nombre de una rama:
		git branch -m nombre inicial nombre final
	Crear una nueva rama y situarme en ella: 
		git branch -b nombrerama
	Eliminar una rama: 
		git branch -d nombrerama
	Otras cosas por hacer con git branch
		git branch -h

desde la rama principal o master...

git log --oneline --decorate --all --graph: nos muestra todos los commits/cambios
hechos en todas las ramas.

--->Fusion de ramas (git merge)

Lo primero a hacer es ver los cambios, ramas que se han hecho previamente:
	git log --oneline --decorate --all --graph: nos muestra todos los commits/cambios
	hechos en todas las ramas.
1. ir a la rama de destino... donde quedara todo el repositorio
	git checkout nombrerama
2. git merge ramadeorigen (o rama de la cual se toman los archivos)

Nota: para lograr otra fusion con otras ramas debemos identificar previamente el commit
      antecesor de la rama origen o el HEAD. 
3. git merge otrarama.....
	nos pide un commit de confirmacion..
	Todo esta fusion se hace de manera recursiva....
4. Volvemos a verificar nuestra nueva reorganizacion:
	git log --oneline --decorate --all --graph

---> Conflictos:

	Un conflicto se presenta cuando dos o mas ramas hacen cambios 
	en el archivo en una misma region o linea de codigo.

	Entonces cuando se realiza git merge rama1 adicciona los cambios de rama1
	pero al realizar git merge rama2 ocasiona CONFLICTO.

	Como solucionar:
	- git diff nos muestra los cambios realizados (+ , -)
	- desde la carpeta local (PC) tratar de unificar los cambios
	- git add nombrearchivo.extension
	- git commit -m
 
	Nota: el conflicto queda marcado de manera informativa

---> Conflictos (parte2):
	Se siguen las recomendaciones anteriores. como son cambios locales
	se tiene qe dialogar con las personas (ramas) involucradas para
	lograr un acuerdo.

	Para reversar una fusion:
		git merge --abort	
	
	
---> Alias o atajos: 
	Son para reducir la escritura de comandos largos
	
	Ejemplos:
	git log --oneline --decorate --all --graph ---> git lodag (sus iniciales)

1. git config --global alias.lodag 'git log --oneline --decorate --all --graph'
   (todo el comando largo siempre entre comillas simples)

2. Para ver todos los alias guardados en la configuracion de git (por nosotros) :
	git config --global --get-regexp alias
3. Para eliminar un alias:
	git config --global --unset alias.nombrealias
	




Para recuperar o descargar archivos..

1. Descargar un Zip desde el repositorio 
2. Abrir el Git Bash
	Ubicar la carpeta de trabajo (pwd, cd <carpeta>)
	git clone <direccion del repositorio>


Otros comandos
ls: lista los directorios y archivos
pwd: para ver en que ruta de nuestro sistema esta posicionado nuestra consola (Bash)
cd <carpeta>: nos da acceso a esa carpeta

git token 
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

git config --global user.name
	muestra el usuario de github
git config --global user.email
	muestra el correo usado
git config --list
	muestra un resumen
git help
	menu con los mas usados

exit
	salir




